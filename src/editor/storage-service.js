function t(t){const e=Object.assign({},t);return delete e.loadedVideos,e}if(window.saveRecentPlaylist=async e=>(localStorage.setItem("playlist_"+e.id,JSON.stringify(t(e))),e.id),window.getRecentPlaylists=async()=>{const t=Object.assign({},localStorage);return Object.keys(t).filter((t=>t.startsWith("playlist_"))).map((e=>JSON.parse(t[e])))},window.getRecentPlaylist=async t=>{const e=localStorage.getItem("playlist_"+t);return JSON.parse(e)},window.savePlaylist=async e=>{let a=e.id;return e.saved||(a=await window.generatePlaylistId()),e=Object.assign(Object.assign({},e),{id:a,timestamp:Date.now()}),await window.storeObject("playlist_"+a,t(e)),a},window.importPlaylists=async e=>{const a=await window.generatePlaylistIds(e.length),s=e.map((t=>Object.assign(Object.assign({},t),{id:a.shift()})));await Promise.all(s.map((e=>window.storeObject("playlist_"+e.id,t(e)))))},window.removePlaylist=async t=>{if(t.saved)return window.removeObject("playlist_"+t.id);localStorage.removeItem("playlist_"+t.id)},window.removeSavedPlaylists=async()=>{const t=(await window.getPlaylists()).map((({id:t})=>t));await Promise.all(t.map((t=>window.removeObject("playlist_"+t))))},window.getPlaylists=async()=>{const t=await window.fetchAllObjects();return Object.keys(t).filter((t=>t.startsWith("playlist_"))).map((e=>{const a=JSON.parse(t[e]);return a.saved=!0,a}))},window.getPlaylist=async t=>{const e=await window.fetchObject("playlist_"+t,null);if(!e)return null;const a=JSON.parse(e);return a.saved=!0,a},"undefined"!=typeof browser){const t=browser.storage.sync;window.fetchObject=async(e,a)=>{const s=await t.get(e);return s&&null!=s[e]?s[e]:a},window.fetchAllObjects=async()=>t.get(null),window.storeObject=async(e,a)=>{const s={};return s[e]=a?JSON.stringify(a):null,t.set(s)},window.removeObject=async e=>t.remove(e);const e="PlaylistIdCounter";window.generatePlaylistId=async()=>{const a=await t.get(e);let s=a[e]||0;return s++,a[e]=s,t.set(a),s},window.generatePlaylistIds=async a=>{const s=await t.get(e);let n=s[e]||0;n++;const i=[...Array(a).keys()].map((t=>t+n));return s[e]=i[i.length-1],t.set(s),i}}else window.location.protocol.startsWith("http")&&(window.fetchObject=async(t,e)=>{const a=localStorage.getItem(t);return a&&JSON.parse(a)||e},window.fetchAllObjects=async()=>Object.assign({},localStorage),window.storeObject=async(t,e)=>{localStorage.setItem(t,e?JSON.stringify(e):null)},window.removeObject=async t=>{localStorage.removeItem(t)},window.generatePlaylistId=async()=>Date.now().toString(),window.generatePlaylistIds=async t=>{const e=Date.now();return[...Array(t).keys()].map((t=>(t+e).toString()))},window.removeSavedPlaylists=async()=>{});const e={openPlaylistEditorAfterCreation:!1,openPlaylistPage:!1,closeAfterCombine:!1,disableThumbnails:!1,openPlaylistBuilderAfterAdd:!1,defaultEditorPage:"/recent",createdPlaylistStorage:"recent"};window.getSettings=async()=>{const t=Object.assign({},e);return await Promise.all(Object.keys(e).map((async a=>{const s=await window.fetchObject(a,e[a]);t[a]=s}))),t};
