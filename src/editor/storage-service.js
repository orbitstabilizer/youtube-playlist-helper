function t(t){const e=t.videos;if(e.length>0&&"string"!=typeof e[0]){const s=e.map((t=>t.videoId));t=Object.assign(Object.assign({},t),{videos:s})}return t}if(window.saveRecentPlaylist=async e=>{localStorage.setItem("playlist_"+e.id,JSON.stringify(t(e)))},window.getRecentPlaylists=async()=>{const t=Object.assign({},localStorage);return Object.keys(t).filter((t=>t.startsWith("playlist_"))).map((e=>JSON.parse(t[e])))},"undefined"!=typeof browser){const e=browser.storage.sync;window.fetchObject=async(t,e)=>{const s=await browser.storage.sync.get(t);return s&&null!=s[t]?s[t]:e},window.storeObject=async(t,s)=>{const n={};return n[t]=s?JSON.stringify(s):null,e.set(n)};const s="PlaylistIdCounter";window.generatePlaylistId=async()=>{const t=await e.get(s);let n=t[s]||0;return n++,t[s]=n,e.set(t),n},window.savePlaylist=async e=>window.storeObject("playlist_"+e.id,t(e)),window.getPlaylists=async()=>{const t=await e.get(null);return Object.keys(t).filter((t=>t.startsWith("playlist_"))).map((e=>JSON.parse(t[e])))}}else window.location.protocol.startsWith("http")&&(window.fetchObject=async(t,e)=>{const s=localStorage.getItem(t);return s&&JSON.parse(s)||e},window.storeObject=async(t,e)=>{localStorage.setItem(t,e?JSON.stringify(e):null)},window.generatePlaylistId=async()=>Date.now().toString(),window.savePlaylist=window.saveRecentPlaylist,window.getPlaylists=window.getRecentPlaylists);const e={openPlaylistPage:!1,closeAfterCombine:!1};window.getSettings=async()=>{const t=Object.assign({},e);return await Promise.all(Object.keys(e).map((async s=>{const n=await window.fetchObject(s,e[s]);t[s]=n}))),t};
