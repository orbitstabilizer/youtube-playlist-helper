function t(t){const e=Object.assign({},t);return delete e.loadedVideos,e}if(window.saveRecentPlaylist=async e=>(localStorage.setItem("playlist_"+e.id,JSON.stringify(t(e))),e.id),window.getRecentPlaylists=async()=>{const t=Object.assign({},localStorage);return Object.keys(t).filter((t=>t.startsWith("playlist_"))).map((e=>JSON.parse(t[e])))},window.getRecentPlaylist=async t=>{const e=localStorage.getItem("playlist_"+t);return JSON.parse(e)},window.savePlaylist=async s=>{let a=s.id;return s.saved||(a=await window.generatePlaylistId()),s=Object.assign(Object.assign({timestamp:Date.now()},s),{id:a}),await window.storeObject("playlist_"+a,t(s)),e(),a},window.importPlaylists=async s=>{const a=await window.generatePlaylistIds(s.length),n=s.map((t=>Object.assign(Object.assign({},t),{id:a.shift()})));await Promise.all(n.map((e=>window.storeObject("playlist_"+e.id,t(e))))),e()},window.removePlaylist=async t=>{t.saved?(await window.removeObject("playlist_"+t.id),e()):localStorage.removeItem("playlist_"+t.id)},window.removeSavedPlaylists=async()=>{const t=(await window.getPlaylists()).map((({id:t})=>t));await Promise.all(t.map((t=>window.removeObject("playlist_"+t)))),e()},window.getPlaylists=async()=>{const t=await window.fetchAllObjects();return Object.keys(t).filter((t=>t.startsWith("playlist_"))).map((e=>{const s=JSON.parse(t[e]);return s.saved=!0,s}))},window.getPlaylist=async t=>{const e=await window.fetchObject("playlist_"+t,null);if(!e)return null;const s=JSON.parse(e);return s.saved=!0,s},"undefined"!=typeof browser){window.fetchObject=async(t,e)=>{const s=await browser.storage.sync.get(t);return s&&null!=s[t]?"number"==typeof e?+s[t]:s[t]:e},window.fetchAllObjects=async()=>browser.storage.sync.get(null),window.storeObject=async(t,e)=>{const s={};return s[t]=e?"string"==typeof e?e:JSON.stringify(e):null,browser.storage.sync.set(s)},window.removeObject=async t=>browser.storage.sync.remove(t);const t="PlaylistIdCounter";window.generatePlaylistId=async()=>{const e=await browser.storage.sync.get(t);let s=e[t]||0;return s++,e[t]=s,browser.storage.sync.set(e),s},window.generatePlaylistIds=async e=>{const s=await browser.storage.sync.get(t);let a=s[t]||0;a++;const n=[...Array(e).keys()].map((t=>t+a));return s[t]=n[n.length-1],browser.storage.sync.set(s),n}}else window.location.protocol.startsWith("http")&&(window.fetchObject=async(t,e)=>{const s=localStorage.getItem(t);if(s){const t=JSON.parse(s);return"number"==typeof e?+t:t}return e},window.fetchAllObjects=async()=>Object.assign({},localStorage),window.storeObject=async(t,e)=>{localStorage.setItem(t,e?JSON.stringify(e):null)},window.removeObject=async t=>{localStorage.removeItem(t)},window.generatePlaylistId=async()=>Date.now().toString(),window.generatePlaylistIds=async t=>{const e=Date.now();return[...Array(t).keys()].map((t=>(t+e).toString()))},window.removeSavedPlaylists=async()=>{});function e(){browser.runtime.sendMessage({cmd:"update-saved-playlists"})}window.getSettings=async()=>{const t={openPlaylistEditorAfterCreation:!0,openPlaylistPage:!1,closeAfterCombine:!1,disableThumbnails:!1,openPlaylistBuilderAfterAdd:!1,openSavedPlaylistAfterAdd:!1,defaultEditorPage:"/recent",createdPlaylistStorage:"recent"},e=Object.assign({},t);return await Promise.all(Object.keys(t).map((async s=>{const a=await window.fetchObject(s,t[s]);e[s]=a}))),e};
