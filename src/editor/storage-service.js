function e(e){const t=Object.assign({},e);return delete t.loadedVideos,t}if(window.savePlaylist=async s=>{let a=s.id;return s.saved||(a=await window.generatePlaylistId()),s=Object.assign(Object.assign({timestamp:Date.now()},s),{id:a}),await window.storeObject("playlist_"+a,e(s)),t(),a},window.importPlaylists=async s=>{const a=await window.generatePlaylistIds(s.length),n=s.map((e=>Object.assign(Object.assign({},e),{id:a.shift()})));await Promise.all(n.map((t=>window.storeObject("playlist_"+t.id,e(t))))),t()},window.removePlaylist=async e=>{e.saved?(await window.removeObject("playlist_"+e.id),t()):localStorage.removeItem("playlist_"+e.id)},window.removeSavedPlaylists=async()=>{const e=(await window.getPlaylists()).map((({id:e})=>e));await Promise.all(e.map((e=>window.removeObject("playlist_"+e)))),t()},window.getPlaylists=async()=>{const e=await window.fetchAllObjects();return Object.keys(e).filter((e=>e.startsWith("playlist_"))).map((t=>{const s=JSON.parse(e[t]);return s.saved=!0,s}))},window.getPlaylist=async e=>{const t=await window.fetchObject("playlist_"+e,null);if(!t)return null;const s=JSON.parse(t);return s.saved=!0,s},"undefined"!=typeof browser){window.fetchObject=async(e,t)=>{const s=await browser.storage.sync.get(e);return s&&null!=s[e]?"number"==typeof t?+s[e]:s[e]:t},window.fetchAllObjects=async()=>browser.storage.sync.get(null),window.storeObject=async(e,t)=>{const s={};return s[e]=t?"string"==typeof t?t:JSON.stringify(t):null,browser.storage.sync.set(s)},window.removeObject=async e=>browser.storage.sync.remove(e);const e="PlaylistIdCounter";window.generatePlaylistId=async()=>{const t=await browser.storage.sync.get(e);let s=t[e]||0;return s++,t[e]=s,browser.storage.sync.set(t),s},window.generatePlaylistIds=async t=>{const s=await browser.storage.sync.get(e);let a=s[e]||0;a++;const n=[...Array(t).keys()].map((e=>e+a));return s[e]=n[n.length-1],browser.storage.sync.set(s),n}}else window.location.protocol.startsWith("http")&&(window.fetchObject=async(e,t)=>{const s=localStorage.getItem(e);if(s){const e=JSON.parse(s);return"number"==typeof t?+e:e}return t},window.fetchAllObjects=async()=>Object.assign({},localStorage),window.storeObject=async(e,t)=>{localStorage.setItem(e,t?JSON.stringify(t):null)},window.removeObject=async e=>{localStorage.removeItem(e)},window.generatePlaylistId=async()=>Date.now().toString(),window.generatePlaylistIds=async e=>{const t=Date.now();return[...Array(e).keys()].map((e=>(e+t).toString()))},window.removeSavedPlaylists=async()=>{});function t(){browser.runtime.sendMessage({cmd:"update-saved-playlists"})}window.getSettings=async()=>{const e={openPlaylistEditorAfterCreation:!0,openPlaylistPage:!1,closeAfterCombine:!1,disableThumbnails:!1,openPlaylistBuilderAfterAdd:!0,openSavedPlaylistAfterAdd:!0,defaultEditorPage:"/saved",saveCreatedPlaylists:!1,disableContextBuilder:!1,disableContextSaved:!1,themeChoice:"device"},t=Object.assign({},e);return await Promise.all(Object.keys(e).map((async s=>{const a=await window.fetchObject(s,e[s]);t[s]=a}))),await async function(e){"saved"==e.createdPlaylistStorage&&(e.saveCreatedPlaylists=!0,await browser.storage.sync.set({saveCreatedPlaylists:e.saveCreatedPlaylists}));"/recent"==e.defaultEditorPage&&(e.defaultEditorPage="/saved",await browser.storage.sync.set({defaultEditorPage:e.defaultEditorPage}))}(t),t};
